#BlueJ class context
comment0.params=first0\ rest0
comment0.target=IntList(int,\ IntList)
comment0.text=\n\ A\ List\ with\ first\ FIRST0\ and\ rest\ REST0.\n
comment1.params=
comment1.target=IntList()
comment1.text=\n\ A\ List\ with\ null\ rest,\ and\ first\ \=\ 0.\n
comment10.params=
comment10.target=int\ hashCode()
comment10.text=\n\ DO\ NOT\ MODIFY\ ANYTHING\ BELOW\ THIS\ LINE\!\ Many\ of\ the\ concepts\ below\ here\n\ will\ be\ introduced\ later\ in\ the\ course\ or\ feature\ some\ form\ of\ advanced\n\ trickery\ which\ we\ implemented\ to\ help\ make\ your\ life\ a\ little\ easier\ for\n\ the\ lab.\n
comment11.params=args
comment11.target=IntList\ of(java.lang.Integer[])
comment11.text=\n\ Returns\ a\ new\ IntList\ containing\ the\ ints\ in\ ARGS.\ You\ are\ not\n\ expected\ to\ read\ or\ understand\ this\ method.\n
comment12.params=x
comment12.target=boolean\ equals(java.lang.Object)
comment12.text=\n\ Returns\ true\ iff\ X\ is\ an\ IntList\ containing\ the\ same\ sequence\ of\ ints\n\ as\ THIS.\ Cannot\ handle\ IntLists\ with\ cycles.\ You\ are\ not\ expected\ to\n\ read\ or\ understand\ this\ method.\n
comment13.params=A
comment13.target=int\ detectCycles(IntList)
comment13.text=\n\ If\ a\ cycle\ exists\ in\ the\ IntList,\ this\ method\n\ returns\ an\ integer\ equal\ to\ the\ item\ number\ of\ the\ location\ where\ the\n\ cycle\ is\ detected.\n\ <p>\n\ If\ there\ is\ no\ cycle,\ the\ number\ 0\ is\ returned\ instead.\ This\ is\ a\n\ utility\ method\ for\ lab2.\ You\ are\ not\ expected\ to\ read,\ understand,\ or\n\ even\ use\ this\ method.\ The\ point\ of\ this\ method\ is\ so\ that\ if\ you\ convert\n\ an\ IntList\ into\ a\ String\ and\ that\ IntList\ has\ a\ loop,\ your\ computer\n\ doesn't\ get\ stuck\ in\ an\ infinite\ loop.\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment2.params=L
comment2.target=void\ dSquareList(IntList)
comment2.text=\n\ Returns\ a\ list\ equal\ to\ L\ with\ all\ elements\ squared.\ Destructive.\n
comment3.params=L
comment3.target=IntList\ squareListIterative(IntList)
comment3.text=\n\ Returns\ a\ list\ equal\ to\ L\ with\ all\ elements\ squared.\ Non-destructive.\n
comment4.params=L
comment4.target=IntList\ squareListRecursive(IntList)
comment4.text=\n\ Returns\ a\ list\ equal\ to\ L\ with\ all\ elements\ squared.\ Non-destructive.\n
comment5.params=A\ B
comment5.target=IntList\ dcatenate(IntList,\ IntList)
comment5.text=\n\ Returns\ a\ list\ consisting\ of\ the\ elements\ of\ A\ followed\ by\ the\n\ *\ \ elements\ of\ B.\ \ May\ modify\ items\ of\ A.\ Don't\ use\ 'new'.\n
comment6.params=A\ B
comment6.target=IntList\ catenate(IntList,\ IntList)
comment6.text=\n\ Returns\ a\ list\ consisting\ of\ the\ elements\ of\ A\ followed\ by\ the\n\ *\ elements\ of\ B.\ \ May\ NOT\ modify\ items\ of\ A.\ \ Use\ 'new'.\n
comment7.params=A\ B
comment7.target=IntList\ catenateRecursive(IntList,\ IntList)
comment8.params=A\ B
comment8.target=IntList\ dcatenateRecursive(IntList,\ IntList)
comment9.params=A
comment9.target=IntList\ reverse(IntList)
numComments=15
