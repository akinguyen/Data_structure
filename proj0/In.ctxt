#BlueJ class context
comment0.params=
comment0.target=In()
comment0.text=\n\ Create\ an\ input\ stream\ from\ standard\ input.\n
comment1.params=socket
comment1.target=In(java.net.Socket)
comment1.text=\n\ Create\ an\ input\ stream\ from\ a\ socket.\n
comment10.params=
comment10.target=java.lang.String\ readLine()
comment10.text=\n\ Read\ and\ return\ the\ next\ line.\n
comment11.params=
comment11.target=char\ readChar()
comment11.text=\n\ Read\ and\ return\ the\ next\ character.\n
comment12.params=
comment12.target=java.lang.String\ readAll()
comment12.text=\n\ Read\ and\ return\ the\ remainder\ of\ the\ input\ as\ a\ string.\n
comment13.params=
comment13.target=java.lang.String\ readString()
comment13.text=\n\ Read\ and\ return\ the\ next\ string.\n
comment14.params=
comment14.target=int\ readInt()
comment14.text=\n\ Read\ and\ return\ the\ next\ int.\n
comment15.params=
comment15.target=double\ readDouble()
comment15.text=\n\ Read\ and\ return\ the\ next\ double.\n
comment16.params=
comment16.target=float\ readFloat()
comment16.text=\n\ Read\ and\ return\ the\ next\ float.\n
comment17.params=
comment17.target=long\ readLong()
comment17.text=\n\ Read\ and\ return\ the\ next\ long.\n
comment18.params=
comment18.target=short\ readShort()
comment18.text=\n\ Read\ and\ return\ the\ next\ short.\n
comment19.params=
comment19.target=byte\ readByte()
comment19.text=\n\ Read\ and\ return\ the\ next\ byte.\n
comment2.params=url
comment2.target=In(java.net.URL)
comment2.text=\n\ Create\ an\ input\ stream\ from\ a\ URL.\n
comment20.params=
comment20.target=boolean\ readBoolean()
comment20.text=\n\ Read\ and\ return\ the\ next\ boolean,\ allowing\ case-insensitive\n\ "true"\ or\ "1"\ for\ true,\ and\ "false"\ or\ "0"\ for\ false.\n
comment21.params=
comment21.target=java.lang.String[]\ readAllStrings()
comment21.text=\n\ Read\ all\ strings\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n
comment22.params=
comment22.target=java.lang.String[]\ readAllLines()
comment22.text=\n\ Reads\ all\ remaining\ lines\ from\ input\ stream\ and\ returns\ them\ as\ an\ array\ of\ strings.\n\ @return\ all\ remaining\ lines\ on\ input\ stream,\ as\ an\ array\ of\ strings\n
comment23.params=
comment23.target=int[]\ readAllInts()
comment23.text=\n\ Read\ all\ ints\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n
comment24.params=
comment24.target=double[]\ readAllDoubles()
comment24.text=\n\ Read\ all\ doubles\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\n
comment25.params=
comment25.target=void\ close()
comment25.text=\n\ Close\ the\ input\ stream.\n
comment26.params=filename
comment26.target=int[]\ readInts(java.lang.String)
comment26.text=\n\ Reads\ all\ ints\ from\ a\ file\ \n\ @deprecated\ Clearer\ to\ use\ \n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllInts()}\n
comment27.params=filename
comment27.target=double[]\ readDoubles(java.lang.String)
comment27.text=\n\ Reads\ all\ doubles\ from\ a\ file\n\ @deprecated\ Clearer\ to\ use\ \n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllDoubles()}\n
comment28.params=filename
comment28.target=java.lang.String[]\ readStrings(java.lang.String)
comment28.text=\n\ Reads\ all\ strings\ from\ a\ file\n\ @deprecated\ Clearer\ to\ use\ \n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllStrings()}\n
comment29.params=
comment29.target=int[]\ readInts()
comment29.text=\n\ Reads\ all\ ints\ from\ stdin\ \n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllInts()}\n
comment3.params=file
comment3.target=In(java.io.File)
comment3.text=\n\ Create\ an\ input\ stream\ from\ a\ file.\n
comment30.params=
comment30.target=double[]\ readDoubles()
comment30.text=\n\ Reads\ all\ doubles\ from\ stdin\n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllDoubles()}\n
comment31.params=
comment31.target=java.lang.String[]\ readStrings()
comment31.text=\n\ Reads\ all\ strings\ from\ stdin\n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllStrings()}\n
comment32.params=args
comment32.target=void\ main(java.lang.String[])
comment32.text=\n\ Test\ client.\n
comment4.params=s
comment4.target=In(java.lang.String)
comment4.text=\n\ Create\ an\ input\ stream\ from\ a\ filename\ or\ web\ page\ name.\n
comment5.params=scanner
comment5.target=In(java.util.Scanner)
comment5.text=\n\ Create\ an\ input\ stream\ from\ a\ given\ Scanner\ source;\ use\ with\ \n\ <tt>new\ Scanner(String)</tt>\ to\ read\ from\ a\ string.\n\ <p>\n\ Note\ that\ this\ does\ not\ create\ a\ defensive\ copy,\ so\ the\n\ scanner\ will\ be\ mutated\ as\ you\ read\ on.\ \n
comment6.params=
comment6.target=boolean\ exists()
comment6.text=\n\ Does\ the\ input\ stream\ exist?\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\n\ Is\ the\ input\ empty\ (except\ possibly\ for\ whitespace)?\ Use\ this\n\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\n
comment8.params=
comment8.target=boolean\ hasNextLine()
comment8.text=\n\ Does\ the\ input\ have\ a\ next\ line?\ Use\ this\ to\ know\ whether\ the\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\ <p>\ Functionally\n\ equivalent\ to\ {@link\ \#hasNextChar()}.\n
comment9.params=
comment9.target=boolean\ hasNextChar()
comment9.text=\n\ Is\ the\ input\ empty\ (including\ whitespace)?\ Use\ this\ to\ know\ \n\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\ <p>\ Functionally\n\ equivalent\ to\ {@link\ \#hasNextLine()}.\n
numComments=33
